{"version":3,"sources":["logo.svg","MovieCard.js","MovieList.js","Header.js","Intro.js","Loading.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieCard","poster","title","synopsis","star","Card","Img","variant","src","Body","Title","Text","Truncate","lines","ellipsis","href","Footer","className","num","intt","Math","round","repeat","numToStar","MovieList","data","CardColumns","map","movie","medium_cover_image","rating","Header","Navbar","bg","Brand","Intro","Jumbotron","Button","Loading","Spinner","animation","App","state","_callMovie","fetch","then","res","json","movies","catch","err","console","log","_setMovie","a","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,6NC+B5BC,MAzBf,YAAqD,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,SAAUC,EAAO,EAAPA,KAOzC,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKP,IAC7B,kBAACI,EAAA,EAAKI,KAAN,KACA,kBAACJ,EAAA,EAAKK,MAAN,KAAaR,GACT,kBAACG,EAAA,EAAKM,KAAN,KACI,kBAACC,EAAA,EAAD,CAAUC,MAAO,EAAGC,SAAU,qCAAU,uBAAGC,KAAK,oBAAR,eACnCZ,KAIb,kBAACE,EAAA,EAAKW,OAAN,KACI,2BAAOC,UAAU,cAjB7B,SAAmBC,GACf,IAAIC,EAAOC,KAAKC,MAAMH,EAAI,GAC1B,MAAO,SAAII,OAAOH,GAAQ,SAAIG,OAAO,EAAEH,GAeAI,CAAUnB,OCN1CoB,MAZf,YAA4B,IAARC,EAAO,EAAPA,KAChB,OAEJ,kBAACC,EAAA,EAAD,KACUD,EAAKE,KAAI,SAACC,GACR,OAAO,kBAAC,EAAD,CAAW1B,MAAO0B,EAAM1B,MAAOD,OAAQ2B,EAAMC,mBAAoBzB,KAAMwB,EAAME,OAAQ3B,SAAUyB,EAAMzB,gB,QCGzG4B,MAVf,WACI,OACF,oCACO,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAO1B,QAAQ,QAC5B,kBAACyB,EAAA,EAAOE,MAAR,CAAcnB,KAAK,SAAnB,Y,gBCUQoB,MAdf,WACI,OACI,kBAACC,EAAA,EAAD,KACI,sCACA,mEAGA,2BACI,kBAACC,EAAA,EAAD,CAAQ9B,QAAQ,UAAUQ,KAAK,0CAA/B,kB,QCCDuB,MARf,WACI,OACI,oCACI,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASjC,QAAQ,cCiCjCkC,E,2MA/BXC,MAAQ,G,EAERC,WAAa,WACT,OAAOC,MAAM,yDACZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIA,EAAKtB,KAAKuB,UACvBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG9BG,U,sBAAY,4BAAAC,EAAA,sEACa,EAAKX,aADlB,OACFK,EADE,OAER,EAAKO,SAAS,CACVP,WAHI,2C,mFAQRQ,KAAKH,c,+BAIL,OACI,yBAAKpC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,QAAf,IAAwBuC,KAAKd,MAAMM,OAAW,kBAAC,EAAD,CAAWvB,KAAM+B,KAAKd,MAAMM,SAAW,kBAAC,EAAD,Y,GA3BnFS,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.02044275.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Card} from 'react-bootstrap';\nimport './MovieList.css'\nimport Truncate from 'react-truncate';\n\nfunction MovieCard({poster, title, synopsis, star}) {\n\n    function numToStar(num){\n        var intt = Math.round(num/2)\n        return '★'.repeat(intt) + '☆'.repeat(5-intt)\n    }\n\n    return(\n        <Card>\n            <Card.Img variant=\"top\" src={poster} />\n            <Card.Body>\n            <Card.Title>{title}</Card.Title>\n                <Card.Text>\n                    <Truncate lines={3} ellipsis={<span>... <a href='/link/to/article'>Read more</a></span>}>\n                        {synopsis}\n                    </Truncate>\n                </Card.Text>\n            </Card.Body>\n            <Card.Footer>\n                <small className=\"text-muted\">{numToStar(star)}</small>\n            </Card.Footer>\n        </Card>\n    )\n}\n\nexport default MovieCard;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {CardColumns,Card} from 'react-bootstrap';\n\nimport MovieCard from './MovieCard.js';\n\nfunction MovieList({data}) {\n    return (\n\n<CardColumns>\n        { data.map((movie) => {\n            return <MovieCard title={movie.title} poster={movie.medium_cover_image} star={movie.rating} synopsis={movie.synopsis}/>\n        })}\n        </CardColumns>\n\n    )\n}\n\nexport default MovieList;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar } from 'react-bootstrap';\n\nfunction Header() {\n    return (\n\t\t<>\n        \t<Navbar bg=\"dark\" variant=\"dark\">\n    \t\t\t<Navbar.Brand href=\"#home\">Movie</Navbar.Brand>\n  \t\t\t</Navbar>\n  \t\t</>\n    )\n}\n\nexport default Header","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Jumbotron, Button} from 'react-bootstrap'\n\nfunction Intro() {\n    return (\n        <Jumbotron>\n            <h1>Hello!</h1>\n            <p>\n                This is a test web shows movie info.\n            </p>\n            <p>\n                <Button variant=\"primary\" href=\"https://github.com/hui0518/movie-react\">github link</Button>\n            </p>\n        </Jumbotron>\n    )\n}\n\nexport default Intro","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Spinner} from 'react-bootstrap'\n\n\nfunction Loading() {\n    return (\n        <>\n            <Spinner animation=\"border\" variant=\"primary\" />\n        </>\n    )\n}\n\nexport default Loading","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport MovieList from './MovieList.js';\nimport Header from './Header.js';\nimport Intro from './Intro.js';\nimport Loading from './Loading.js';\n\nclass App extends Component {\n\n    state = {}\n\n    _callMovie = () => {\n        return fetch(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\")\n        .then(res => res.json())\n        .then(json => json.data.movies)\n        .catch(err => console.log(err))\n    }\n\n    _setMovie = async () => {\n        const movies = await this._callMovie()\n        this.setState({\n            movies\n        })\n    }\n\n    componentDidMount() {\n        this._setMovie()\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <Intro />\n                <div className=\"cont\"> {this.state.movies ?   <MovieList data={this.state.movies}/>: <Loading />}</div> \n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}